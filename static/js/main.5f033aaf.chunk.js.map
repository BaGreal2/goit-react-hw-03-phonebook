{"version":3,"sources":["components/Contacts/ContactList.module.css","components/ContactsForm/ContactsForm.module.css","components/App/App.module.css","components/Filter/Filter.module.css","components/ContactsForm/ContactsForm.js","components/Contacts/Contact.js","components/Contacts/ContactList.js","components/Filter/Filter.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","ContactsForm","state","name","number","onChangeName","e","preventDefault","setState","target","value","onChangeNumber","onPushContact","console","log","props","handlePushContact","this","className","styles","container","onSubmit","title","type","onChange","button","Component","Contact","onHandleDelete","parentNode","closest","getAttribute","handleDeleteContact","id","listItem","onClick","ContactList","prevProps","prevState","localStorage","setItem","JSON","stringify","contacts","filter","contact","toLowerCase","includes","list","map","Filter","onFilterChange","handleGetFilter","App","uuidv4","delContacts","delContacts2","index","indexOf","splice","alert","parse","getItem","handleGetName","handleGetNumber","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qIACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,SAAW,8BAA8B,OAAS,8B,gBCArGD,EAAOC,QAAU,CAAC,UAAY,gCAAgC,MAAQ,4BAA4B,OAAS,+B,kBCA3GD,EAAOC,QAAU,CAAC,MAAQ,qB,iBCA1BD,EAAOC,QAAU,CAAC,UAAY,4B,kKCyCfC,E,4MAtCXC,MAAM,CACFC,KAAM,GACNC,OAAQ,I,EAEZC,aAAe,SAACC,GACZA,EAAEC,iBACF,EAAKC,SAAS,CACVL,KAAMG,EAAEG,OAAOC,S,EAGvBC,eAAiB,SAACL,GACdA,EAAEC,iBACF,EAAKC,SAAS,CACVJ,OAAQE,EAAEG,OAAOC,S,EAGzBE,cAAgB,SAACN,GACbA,EAAEC,iBACFM,QAAQC,IAAIR,EAAEG,QACd,EAAKM,MAAMC,kBAAkB,EAAKd,MAAMC,KAAM,EAAKD,MAAME,S,uDAGzD,IAAMD,EAAKc,KAAKF,MAAMZ,KAChBC,EAAOa,KAAKF,MAAMX,OACxB,OACI,qBAAKc,UAAWC,IAAOC,UAAvB,SACI,uBAAMC,SAAUJ,KAAKL,cAArB,UACI,oBAAIM,UAAWC,IAAOG,MAAtB,kBACA,uBAAOnB,KAAK,OAAOoB,KAAK,OAAOb,MAAOP,EAAMqB,SAAUP,KAAKZ,eAC3D,oBAAIa,UAAWC,IAAOG,MAAtB,oBACA,uBAAOnB,KAAK,SAASoB,KAAK,OAAOb,MAAON,EAAQoB,SAAUP,KAAKN,iBAAwB,uBACvF,wBAAQO,UAAWC,IAAOM,OAAQF,KAAK,SAAvC,kC,GAhCOG,a,gBCsBZC,E,4MApBXC,eAAiB,SAACtB,GACdA,EAAEC,iBACFM,QAAQC,IAAIR,EAAEG,OAAOoB,WAAWC,QAAQ,MAAMC,aAAa,OAC3D,EAAKhB,MAAMiB,oBAAoB1B,EAAEG,OAAOoB,WAAWC,QAAQ,MAAMC,aAAa,Q,uDAGlF,OACI,qBAAIE,GAAIhB,KAAKF,MAAMkB,GAAIf,UAAWC,IAAOe,SAAzC,UACI,8BAAIjB,KAAKF,MAAMZ,KAAf,KAAuBc,KAAKF,MAAMX,UADtC,IACkD,wBAAQ+B,QAASlB,KAAKW,eAAgBV,UAAWC,IAAOM,OAAxD,2B,GATpCC,aCkCPU,E,iLA/BQC,EAAWC,GAC1BC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUzB,KAAKF,MAAM4B,a,+BAEtD,IAAD,OACEA,EAAW1B,KAAKF,MAAM4B,SAASC,QAAO,SAAAC,GAAO,OAAEA,EAAQ1C,KAAK2C,cAAcC,SAAS,EAAKhC,MAAM6B,OAAOE,kBAC3G,OACI,8BACI,oBAAI5B,UAAWC,IAAO6B,KAAtB,SACKL,EAASM,KAAI,SAAAJ,GAAO,OACjB,cAAC,EAAD,CACA1C,KAAM0C,EAAQ1C,KACdC,OAAQyC,EAAQzC,OAChB6B,GAAIY,EAAQZ,GAEZD,oBAAqB,EAAKjB,MAAMiB,qBAD3Ba,EAAQZ,e,GAdXP,a,yBCaXwB,E,4MAfXC,eAAiB,SAAC7C,GACdA,EAAEC,iBACF,EAAKQ,MAAMqC,gBAAgB9C,EAAEG,OAAOC,Q,uDAGpC,IAAMkC,EAAO3B,KAAKF,MAAM6B,OACxB,OACI,sBAAK1B,UAAWC,IAAOC,UAAvB,UACI,uDACA,uBAAOG,KAAK,OAAOb,MAAOkC,EAAQpB,SAAUP,KAAKkC,wB,GAV5CzB,a,iBCiFN2B,E,4MA3EXnD,MAAQ,CACNyC,SAAU,CACR,CACExC,KAAM,gBACNC,OAAQ,YACR6B,GAAIqB,eAEN,CACEnD,KAAM,iBACNC,OAAQ,YACR6B,GAAIqB,eAEN,CACEnD,KAAM,gBACNC,OAAQ,YACR6B,GAAIqB,gBAGRV,OAAQ,I,EAEZQ,gBAAkB,SAACR,GACjB,EAAKpC,SAAS,CACZoC,OAAQA,K,EAUZZ,oBAAsB,SAACC,GACrB,IAAIsB,EAAc,EAAKrD,MAAMyC,SAASM,KAAI,SAAAJ,GAAO,OAAEA,EAAQZ,MACvDuB,EAAY,YAAO,EAAKtD,MAAMyC,UAC9Bc,EAAQF,EAAYG,QAAQzB,GAChCuB,EAAaG,OAAOF,EAAO,GAC3B,EAAKjD,SAAS,CACZmC,SAAS,YAAKa,M,EAGlBxC,kBAAoB,SAACb,EAAMC,GACX,EAAKF,MAAMyC,SAASM,KAAI,SAAAJ,GAAO,OAAEA,EAAQ1C,KAAK2C,iBAChDC,SAAS5C,EAAK2C,eAK1Bc,MAAM,GAAD,OAAIzD,EAAJ,6BAJL,EAAKK,UAAS,SAAA8B,GAAS,MAAG,CACxBK,SAAS,GAAD,mBAAML,EAAUK,UAAhB,CAA0B,CAACxC,KAAMA,EAAMC,OAAQA,EAAQ6B,GAAIqB,sB,gEApBrDhB,EAAWD,GACxBE,aAAaI,UACd1B,KAAKT,SAAS,CACZmC,SAAUF,KAAKoB,MAAMtB,aAAauB,QAAQ,iB,+BAwBhD,OACE,sBAAK5C,UAAU,MAAf,UACE,oBAAIA,UAAWC,IAAOG,MAAtB,uBACA,cAAC,EAAD,CACAnB,KAAMc,KAAKf,MAAMC,KACjBC,OAAQa,KAAKf,MAAME,OACnB2D,cAAe9C,KAAK8C,cACpBC,gBAAiB/C,KAAK+C,gBACtBhD,kBAAmBC,KAAKD,oBACxB,oBAAIE,UAAWC,IAAOG,MAAtB,sBACA,cAAC,EAAD,CACAsB,OAAQ3B,KAAKf,MAAM0C,OACnBQ,gBAAiBnC,KAAKmC,kBACtB,cAAC,EAAD,CACAT,SAAU1B,KAAKf,MAAMyC,SACrBC,OAAQ3B,KAAKf,MAAM0C,OACnBZ,oBAAqBf,KAAKe,6B,GArEdN,aCIEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrE,QAAQqE,MAAMA,EAAMC,c","file":"static/js/main.5f033aaf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3xuzb\",\"listItem\":\"ContactList_listItem__lZLv9\",\"button\":\"ContactList_button__19TFW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactsForm_container__39MLw\",\"title\":\"ContactsForm_title__Ke4_H\",\"button\":\"ContactsForm_button__3CkBz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__HbGPO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__3suR0\"};","import React, {Component} from 'react';\r\nimport styles from './ContactsForm.module.css';\r\n\r\nclass ContactsForm extends Component{\r\n    state={\r\n        name: \"\",\r\n        number: \"\",\r\n    }\r\n    onChangeName = (e) => {\r\n        e.preventDefault()\r\n        this.setState({\r\n            name: e.target.value,\r\n          })\r\n    }\r\n    onChangeNumber = (e) => {\r\n        e.preventDefault()\r\n        this.setState({\r\n            number: e.target.value,\r\n          })\r\n    }\r\n    onPushContact = (e) => {\r\n        e.preventDefault()\r\n        console.log(e.target)\r\n        this.props.handlePushContact(this.state.name, this.state.number)\r\n    }\r\n    render(){\r\n        const name=this.props.name\r\n        const number=this.props.number\r\n        return(\r\n            <div className={styles.container}>\r\n                <form onSubmit={this.onPushContact}>\r\n                    <h3 className={styles.title}>Name</h3>\r\n                    <input name=\"name\" type=\"text\" value={name} onChange={this.onChangeName}></input>\r\n                    <h3 className={styles.title}>Number</h3>\r\n                    <input name=\"number\" type=\"text\" value={number} onChange={this.onChangeNumber}></input><br></br>\r\n                    <button className={styles.button} type=\"submit\">Add contact</button>\r\n                </form>\r\n            </div>        \r\n            )\r\n    }\r\n}\r\n\r\nexport default ContactsForm;","import React, {Component} from 'react';\r\nimport styles from './ContactList.module.css'\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Contact extends Component{\r\n    onHandleDelete = (e) => {\r\n        e.preventDefault()\r\n        console.log(e.target.parentNode.closest('li').getAttribute(\"id\"))\r\n        this.props.handleDeleteContact(e.target.parentNode.closest('li').getAttribute(\"id\"))\r\n    }\r\n    render(){\r\n    return(\r\n        <li id={this.props.id} className={styles.listItem}>\r\n            <p>{this.props.name}: {this.props.number}</p> <button onClick={this.onHandleDelete} className={styles.button}>Delete</button>\r\n        </li>\r\n    )\r\n    }\r\n}\r\n\r\nContact.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n    handleDeleteContact: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Contact;","import React, {Component} from 'react';\r\nimport Contact from './Contact';\r\nimport styles from './ContactList.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass ContactList extends Component{\r\n    componentDidUpdate(prevProps, prevState){\r\n        localStorage.setItem(\"contacts\", JSON.stringify(this.props.contacts))\r\n    }\r\n    render(){\r\n        const contacts = this.props.contacts.filter(contact=>contact.name.toLowerCase().includes(this.props.filter.toLowerCase()));\r\n        return(\r\n            <div>\r\n                <ul className={styles.list}>        \r\n                    {contacts.map(contact=>(\r\n                        <Contact \r\n                        name={contact.name}\r\n                        number={contact.number}\r\n                        id={contact.id}\r\n                        key={contact.id}\r\n                        handleDeleteContact={this.props.handleDeleteContact}\r\n                         />\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(PropTypes.exact({\r\n        name: PropTypes.string,\r\n        number: PropTypes.string,\r\n        id: PropTypes.string,\r\n    })).isRequired,\r\n    handleDeleteContact: PropTypes.func.isRequired,\r\n}\r\nexport default ContactList;","import React, {Component} from 'react';\r\nimport styles from './Filter.module.css';\r\n\r\nclass Filter extends Component{\r\n    onFilterChange = (e) => {\r\n        e.preventDefault()\r\n        this.props.handleGetFilter(e.target.value)\r\n    }\r\n    render(){\r\n        const filter=this.props.filter;\r\n        return(\r\n            <div className={styles.container}>\r\n                <h3>Find contacts by name</h3>\r\n                <input type=\"text\" value={filter} onChange={this.onFilterChange}></input>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Filter;","import React, {Component} from 'react';\nimport ContactsForm from '../ContactsForm/ContactsForm'\nimport Contacts from '../Contacts/ContactList'\nimport { v4 as uuidv4 } from 'uuid';\nimport Filter from '../Filter/Filter';\nimport styles from './App.module.css';\n\n\nclass App extends Component {\n    state = {\n      contacts: [\n        {\n          name: \"Roise Simpson\",\n          number: \"645-17-49\",\n          id: uuidv4(),\n        },\n        {\n          name: \"Hermione Kline\",\n          number: \"443-89-12\",\n          id: uuidv4(),\n        },\n        {\n          name: \"Eden Clements\",\n          number: \"459-12-56\",\n          id: uuidv4(),\n        }\n      ],\n      filter: '',\n    }\n  handleGetFilter = (filter) => {\n    this.setState({\n      filter: filter,\n    })\n  }\n  componentDidMount(prevState, prevProps){\n    if(localStorage.contacts){\n      this.setState({\n        contacts: JSON.parse(localStorage.getItem('contacts'))\n      })\n    }\n  }\n  handleDeleteContact = (id) => {\n    let delContacts = this.state.contacts.map(contact=>contact.id)\n    let delContacts2 = [...this.state.contacts]\n    let index = delContacts.indexOf(id)\n    delContacts2.splice(index, 1);\n    this.setState({\n      contacts: [...delContacts2]\n    })\n  }\n  handlePushContact = (name, number) => {\n    let thisArr = this.state.contacts.map(contact=>contact.name.toLowerCase())\n    if(!thisArr.includes(name.toLowerCase())){\n    this.setState(prevState=>({\n      contacts: [...prevState.contacts, {name: name, number: number, id: uuidv4(),}]\n    }))\n  } else{\n    alert(`${name} is already in contacts.`)\n  }\n  }\n  render() {\n  return (\n    <div className=\"App\">\n      <h2 className={styles.title}>Phonebook</h2>\n      <ContactsForm\n      name={this.state.name}\n      number={this.state.number}\n      handleGetName={this.handleGetName}\n      handleGetNumber={this.handleGetNumber}\n      handlePushContact={this.handlePushContact}/>\n      <h2 className={styles.title}>Contacts</h2>\n      <Filter\n      filter={this.state.filter}\n      handleGetFilter={this.handleGetFilter}/>\n      <Contacts\n      contacts={this.state.contacts}\n      filter={this.state.filter}\n      handleDeleteContact={this.handleDeleteContact}\n      />\n    </div>\n  );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}